{"mappings":"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","sources":["calc.js"],"sourcesContent":["\nconst CHESS_MANUAL = {\"7,7\":{\"6,6\":{\"8,6\":{\"7,5\":{\"6,8\":{}},\"5,7\":{\"7,5\":{}},\"8,5\":{\"6,8\":{}},\"7,6\":{\"6,8\":{}},\"6,7\":{\"6,8\":{}},\"9,5\":{\"7,8\":{}},\"6,8\":{\"8,5\":{}},\"9,6\":{\"7,8\":{}},\"8,7\":{\"6,8\":{}},\"7,8\":{\"6,8\":{}},\"9,7\":{\"6,8\":{}},\"8,8\":{\"9,7\":{}},\"5,5\":{\"8,7\":{}},\"6,5\":{\"6,8\":{}},\"5,6\":{\"9,7\":{}}}},\"7,6\":{\"6,6\":{\"7,5\":{\"5,5\":{}},\"5,7\":{\"5,5\":{}},\"8,5\":{\"6,7\":{}},\"6,7\":{\"8,5\":{}},\"8,6\":{\"8,8\":{}},\"6,8\":{\"8,8\":{}},\"8,7\":{\"8,8\":{}},\"7,8\":{\"8,8\":{}},\"8,8\":{\"6,5\":{}},\"5,5\":{\"8,8\":{}},\"6,5\":{\"5,5\":{}},\"5,6\":{\"5,5\":{}}}},\"6,7\":{\"6,6\":{\"7,5\":{\"5,5\":{}},\"5,7\":{\"5,5\":{}},\"7,6\":{\"8,5\":{}},\"5,8\":{\"7,6\":{}},\"8,6\":{\"8,8\":{}},\"6,8\":{\"8,8\":{}},\"8,7\":{\"8,8\":{}},\"7,8\":{\"8,8\":{}},\"8,8\":{\"5,6\":{}},\"5,5\":{\"8,8\":{}},\"6,5\":{\"5,5\":{}},\"5,6\":{\"5,5\":{}}}},\"8,6\":{\"6,6\":{\"7,5\":{\"8,8\":{}},\"5,7\":{\"8,8\":{}},\"8,5\":{\"8,8\":{}},\"7,6\":{\"8,8\":{}},\"6,7\":{\"8,8\":{}},\"9,5\":{\"6,7\":{}},\"6,8\":{\"5,7\":{}},\"9,6\":{\"5,7\":{}},\"8,7\":{\"8,8\":{}},\"7,8\":{\"8,8\":{}},\"9,7\":{\"7,5\":{}},\"8,8\":{\"6,5\":{}},\"5,5\":{\"7,8\":{}},\"6,5\":{\"8,8\":{}},\"5,6\":{\"7,8\":{}}}},\"6,8\":{\"6,6\":{\"7,5\":{\"8,8\":{}},\"5,7\":{\"8,8\":{}},\"7,6\":{\"8,8\":{}},\"6,7\":{\"8,8\":{}},\"5,8\":{\"8,8\":{}},\"8,6\":{\"5,7\":{}},\"5,9\":{\"7,6\":{}},\"8,7\":{\"8,8\":{}},\"7,8\":{\"8,8\":{}},\"6,9\":{\"7,5\":{}},\"8,8\":{\"5,6\":{}},\"7,9\":{\"5,7\":{}},\"5,5\":{\"8,7\":{}},\"6,5\":{\"8,7\":{}},\"5,6\":{\"8,8\":{}}}},\"8,7\":{\"8,6\":{\"7,5\":{\"9,5\":{}},\"6,6\":{\"6,8\":{}},\"8,5\":{\"9,5\":{}},\"7,6\":{\"6,5\":{}},\"6,7\":{\"6,8\":{}},\"9,5\":{\"6,8\":{}},\"6,8\":{\"9,6\":{}},\"9,6\":{\"9,5\":{}},\"7,8\":{\"6,8\":{}},\"9,7\":{\"9,5\":{}},\"8,8\":{\"6,8\":{}},\"9,8\":{\"7,6\":{}}}},\"7,8\":{\"6,8\":{\"6,6\":{\"8,6\":{}},\"5,7\":{\"5,9\":{}},\"7,6\":{\"8,6\":{}},\"6,7\":{\"5,6\":{}},\"5,8\":{\"5,9\":{}},\"8,6\":{\"6,9\":{}},\"5,9\":{\"8,6\":{}},\"8,7\":{\"8,6\":{}},\"6,9\":{\"5,9\":{}},\"8,8\":{\"8,6\":{}},\"7,9\":{\"5,9\":{}},\"8,9\":{\"6,7\":{}}}},\"8,8\":{\"8,6\":{\"7,5\":{\"6,8\":{}},\"6,6\":{\"9,7\":{}},\"8,5\":{\"6,7\":{}},\"7,6\":{\"6,8\":{}},\"6,7\":{\"6,8\":{}},\"9,5\":{\"6,7\":{}},\"6,8\":{\"9,6\":{}},\"9,6\":{\"6,8\":{}},\"8,7\":{\"6,8\":{}},\"7,8\":{\"6,8\":{}},\"9,7\":{\"6,8\":{}},\"7,9\":{\"9,7\":{}},\"9,8\":{\"6,8\":{}},\"8,9\":{\"7,5\":{}},\"9,9\":{\"7,6\":{}}}}}}\n\n\n\nconst b2 = (n) => {\n    return 1 << (n + 1);\n}\nconst sum = (arr) => {\n    let s = 0;\n    arr.forEach(o => s += o);\n    return s;\n}\nconst INF = b2(19);\nconst SHAPE = {\n    \"ooooo\": [INF, 11],\n\n    //活4\n    \"_oooo_\": [b2(14), 10],\n\n    //眠4\n    \"oooo_\": [b2(9), 9],\n    \"ooo_o\": [b2(9), 9],\n    \"oo_oo\": [b2(9), 9],\n    \"o_ooo\": [b2(9), 9],\n    \"_oooo\": [b2(9), 9],\n\n    //活3\n    \"__ooo__\": [b2(9), 8],\n\n    //半活3  先手能成活4\n    \"_ooo__\": [b2(8), 7],\n    \"_oo_o_\": [b2(8), 7],\n    \"_o_oo_\": [b2(8), 7],\n\n    //眠3\n    \"ooo__\": [b2(7), 6],\n    \"oo_o_\": [b2(7), 6],\n    \"oo__o\": [b2(7), 6],\n    \"o_oo_\": [b2(7), 6],\n    \"o_o_o\": [b2(7), 6],\n    \"o__oo\": [b2(7), 6],\n    \"_ooo_\": [b2(7), 6],\n    \"_oo_o\": [b2(7), 6],\n    \"_o_oo\": [b2(7), 6],\n    \"__ooo\": [b2(7), 6],\n\n    //活2\n    \"___oo___\": [b2(7), 5],\n\n    //半活2\n    \"__oo___\": [b2(6), 4],\n    \"__o_o__\": [b2(6), 4],\n\n    //眠2\n    \"_oo__\": [b2(5), 3],\n    \"__oo_\": [b2(5), 3],\n    \"_o_o_\": [b2(5) - 1, 3],\n    \"oo___\": [b2(5) - 2, 3],\n    \"o_o__\": [b2(5) - 2, 3],\n    \"o__o_\": [b2(5) - 2, 3],\n    \"o___o\": [b2(5) - 2, 3],\n    \"_o__o\": [b2(5) - 2, 3],\n    \"__o_o\": [b2(5) - 2, 3],\n    \"___oo\": [b2(5) - 2, 3],\n\n    //活1\n    \"____o____\": [b2(5), 2],\n\n    //眠1\n    \"__o__\": [b2(3), 1],\n    \"_o___\": [b2(3) - 1, 1],\n    \"___o_\": [b2(3) - 1, 1],\n    \"o____\": [b2(3) - 2, 1],\n    \"____o\": [b2(3) - 2, 1],\n}\n\nconst create2DArr = (w, h, v) => {\n    let arr = [];\n    for (let y = 0; y < h; y++) {\n        arr[y] = []\n        for (let x = 0; x < w; x++) {\n            arr[y][x] = v;\n        }\n    }\n    return arr;\n}\nconst changeRound = (round, x, y, t) => {\n    for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) {\n            let nowX = x + dx;\n            let nowY = y + dy;\n            if (nowX < 0 || nowX >= round[0].length || nowY < 0 || nowY >= round.length) {\n                continue;\n            }\n            round[nowY][nowX] += t;\n        }\n    }\n}\nlet DXY = [[1, 0], [1, 1], [0, 1], [-1, 1]];\nconst getShapes = (points, x, y, d) => {\n    if (points[y][x] == -1) {\n        return [];\n    }\n    let color = points[y][x];\n    let shapes = [];\n    for (let t = 0; t < 4; t++) {\n        if (d !== undefined && t != d) {\n            continue;\n        }\n        let line = \"o\";\n        for (let i = 1; i <= 4; i++) {\n            let xx = x + i * DXY[t][0];\n            let yy = y + i * DXY[t][1];\n            if (xx < 0 || xx >= points[0].length || yy < 0 || yy >= points.length || points[yy][xx] == 1 - color) {\n                break;\n            } else if (points[yy][xx] == color) {\n                line += \"o\"\n            } else {\n                line += \"_\"\n            }\n        }\n        for (let i = -1; i >= -4; i--) {\n            let xx = x + i * DXY[t][0];\n            let yy = y + i * DXY[t][1];\n            if (xx < 0 || xx >= points[0].length || yy < 0 || yy >= points.length || points[yy][xx] == 1 - color) {\n                break;\n            } else if (points[yy][xx] == color) {\n                line = \"o\" + line;\n            } else {\n                line = \"_\" + line;\n            }\n        }\n        shapes[t] = line;\n    }\n    return shapes;\n}\nconst getGrade = (points, x, y, d) => {\n    let grade = [0, 0, 0, 0, 0];\n    if (points[y][x] == -1) {\n        return grade;\n    }\n    let shapes = getShapes(points, x, y, d);\n    for (let i = 0; i < 4; i++) {\n        if (!shapes[i]) {\n            continue;\n        }\n        for (let s in SHAPE) {\n            if (shapes[i].indexOf(s) != -1) {\n                grade[i] = SHAPE[s][0];\n                grade[4] += grade[i];\n                break;\n            }\n        }\n    }\n    return grade;\n}\n\nconst print = (name, arr2d, getValue) => {\n    console.log(getValue)\n    let result = \"------------------------\\n\";\n    result += `-----------${name}-------------\\n`;\n    for (let y = 0; y < arr2d.length; y++) {\n        for (let x = 0; x < arr2d[0].length; x++) {\n            result += (getValue ? getValue(arr2d[y][x]) : arr2d[y][x]) + \"\\t\"\n        }\n        result += \"\\n\"\n    }\n    console.log(result)\n}\n\nconst foreach = (arr2d, handler) => {\n    let bkFlag = false;\n    const bk = () => bkFlag = true;\n    for (let y = 0; y < arr2d.length; y++) {\n        for (let x = 0; x < arr2d[0].length; x++) {\n            handler(x, y, arr2d[y][x], bk);\n            if (bkFlag) {\n                return;\n            }\n        }\n    }\n}\n\nconst BLACK = 1;\nconst WHITE = 0;\nconst EMPTY = -1;\nclass Chess {\n\n    constructor(points, current) {\n        if (!points || !points.length || points.length != points[0].length) {\n            throw new Error();\n        }\n        this.points = JSON.parse(JSON.stringify(points));\n        this.w = this.points.length;\n        this.current = current;\n        this.passArea = create2DArr(this.w, this.w, 0);\n        this.passArea[Math.floor(this.w / 2)][Math.floor(this.w / 2)] = 1;\n        foreach(this.points, (x, y, v) => v != EMPTY && changeRound(this.passArea, x, y, 1));\n\n        this.fullGrade = [0, 0];\n        this.gradeArea = create2DArr(this.w, this.w, [0, 0, 0, 0, 0]);\n        foreach(this.points, (x, y, v) => {\n            if (v == EMPTY) {\n                return;\n            }\n            this.gradeArea[y][x] = getGrade(this.points, x, y);\n            this.gradeArea[y][x][4] = sum(this.gradeArea[y][x]);\n            this.fullGrade[BLACK] += (v == BLACK ? 1 : -1) * this.gradeArea[y][x][4];\n            this.fullGrade[WHITE] += (v == WHITE ? 1 : -1) * this.gradeArea[y][x][4];\n        });\n\n        this.cm = CHESS_MANUAL;\n    }\n\n    getPoints() {\n        return JSON.parse(JSON.stringify(this.points));\n    }\n\n    isWin(x, y) {\n        if (this.points[y][x] == EMPTY) {\n            return false;\n        }\n        for (let shape of getShapes(this.points, x, y)) {\n            if (shape.indexOf(\"ooooo\") != -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    updateMiGrade(x, y) {\n        for (let t = 0; t < 4; t++) {\n            for (let i = -4; i <= 4; i++) {\n                if (i == 0) {\n                    continue;\n                }\n                let xx = x + i * DXY[t][0];\n                let yy = y + i * DXY[t][1];\n                if (xx >= 0 && xx < this.w && yy >= 0 && yy < this.w) {\n                    let grade = getGrade(this.points, xx, yy, t);\n                    let dGrade = grade[t] - this.gradeArea[yy][xx][t];\n                    let v = this.points[yy][xx];\n                    this.fullGrade[BLACK] += (v == BLACK ? 1 : -1) * dGrade;\n                    this.fullGrade[WHITE] += (v == WHITE ? 1 : -1) * dGrade;\n                    this.gradeArea[yy][xx][4] += dGrade;\n                    this.gradeArea[yy][xx][t] = grade[t];\n                }\n            }\n        }\n    }\n\n    putPoint(x, y, color, fixed) {\n        if (this.points[y][x] != EMPTY) {\n            return false;\n        }\n        this.points[y][x] = color;\n        changeRound(this.passArea, x, y, 1);\n        this.updateMiGrade(x, y);\n        this.gradeArea[y][x] = getGrade(this.points, x, y);\n        this.gradeArea[y][x][4] = sum(this.gradeArea[y][x]);\n        this.fullGrade[BLACK] += (color == BLACK ? 1 : -1) * this.gradeArea[y][x][4];\n        this.fullGrade[WHITE] += (color == WHITE ? 1 : -1) * this.gradeArea[y][x][4];\n\n        if (this.cm) {\n            this.cm = this.cm[`${x},${y}`];\n        }\n        return true;\n    }\n\n\n    removePoint(x, y) {\n        let color = this.points[y][x];\n        this.points[y][x] = EMPTY;\n        changeRound(this.passArea, x, y, -1);\n        this.updateMiGrade(x, y);\n        this.fullGrade[BLACK] += (color == BLACK ? -1 : 1) * this.gradeArea[y][x][4];\n        this.fullGrade[WHITE] += (color == WHITE ? -1 : 1) * this.gradeArea[y][x][4];\n        this.gradeArea[y][x] = [0, 0, 0, 0, 0];\n    }\n\n    // assess(color) {\n    //     let grade = 0;\n    //     for (let y = 0; y < this.w; y++) {\n    //         for (let x = 0; x < this.w; x++) {\n    //             let v = this.points[y][x];\n    //             if (v != EMPTY) {\n    //                 grade += (v == color ? 1 : -1) * this.gradeArea[y][x][4];\n    //             }\n    //         }\n    //     }\n    //     // foreach(this.points, (x, y, v) => v != EMPTY && (grade += (v == color ? 1 : -1) * this.gradeArea[y][x][4]));\n    //     return grade;\n    // }\n\n    calc(color, depth) {\n        if (color == BLACK && this.cm) {\n            for (let k in this.cm) {\n                let xy = k.split(\",\");\n                return { x: Number(xy[0]), y: Number(xy[1]) };\n            }\n        }\n        return this.subCalc(color, depth, null);\n    }\n\n    subCalc(color, depth, preMin) {\n        let maxG = null;\n        let p;\n        for (let y = 0; y < this.w; y++) {\n            for (let x = 0; x < this.w; x++) {\n                if (this.points[y][x] != EMPTY || this.passArea[y][x] == 0) {\n                    continue;\n                }\n                this.putPoint(x, y, color);\n                let pg = getGrade(this.points, x, y);\n                if (pg[4] >= INF) {\n                    this.removePoint(x, y);\n                    return { x, y, g: INF };\n                }\n                let g = depth == 1 ? this.fullGrade[1 - color] : this.subCalc(1 - color, depth - 1, maxG == null ? null : -maxG).g;\n                this.removePoint(x, y);\n                g = -g;\n                if (maxG == null || g > maxG) {\n                    maxG = g;\n                    p = { x, y };\n                }\n                if (preMin !== null && preMin !== undefined && maxG >= preMin) {\n                    return { x, y, g: INF };\n                }\n            }\n        }\n        return { ...p, g: maxG };\n    }\n}\n"],"names":["CHESS_MANUAL","b2","n","sum","arr","s","forEach","o","INF","SHAPE","ooooo","_oooo_","oooo_","ooo_o","oo_oo","o_ooo","_oooo","__ooo__","_ooo__","_oo_o_","_o_oo_","ooo__","oo_o_","oo__o","o_oo_","o_o_o","o__oo","_ooo_","_oo_o","_o_oo","__ooo","___oo___","__oo___","__o_o__","_oo__","__oo_","_o_o_","oo___","o_o__","o__o_","o___o","_o__o","__o_o","___oo","____o____","__o__","_o___","___o_","o____","____o","create2DArr","w","h","v","y","x","changeRound","round","t","dy","dx","nowX","nowY","length","DXY","getShapes","points","d","color","shapes","undefined","line","i","xx","yy","i1","getGrade","grade","indexOf","print","name","arr2d","getValue","console","log","result","foreach","handler","bkFlag","bk","BLACK","WHITE","EMPTY","Chess","constructor","current","Error","this","JSON","parse","stringify","passArea","Math","floor","fullGrade","gradeArea","cm","getPoints","isWin","shape","updateMiGrade","dGrade","putPoint","fixed","removePoint","calc","depth","k","xy","split","Number","subCalc","preMin","p","maxG","g"],"version":3,"file":"index.8172a1b1.js.map"}